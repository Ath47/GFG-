The Postmaster wants to write a program to answer the queries regarding letter collection in a city. A city is represented as a matrix mat of size n*m. Each cell represents a house and contains letters which are denoted by a number in the cell. The program should answer q queries which are of following types:
1 i j : To sum all the letters which are at a 1-hop distance from the cell (i,j) in any direction
2 i j : To sum all the letters which are at a 2-hop distance from the cell (i,j) in any direction 
The queries are given in a 2D matrix queries[][].
In one hop distance postmaster can go to any of [(i-1,j-1), (i-1,j), (i-1,j+1), (i,j-1), (i,j+1), (i+1,j-1), (i+1,j), (i+1,j+1)] from (i,j). 

Example 1:

Input: 
n = 4, m = 5
mat = {{1, 2, 3, 4, 10}, 
       {5, 6, 7, 8, 10}, 
       {9, 1, 3, 4, 10}, 
       {1, 2, 3, 4, 10}}
q = 2
queries = {{1 0 1}, 
           {2 0 1}}
Output: 
22 29
Explaination: 
For the first query sum is 1+5+6+7+3 = 22. 
For the second query sum is 9+1+3+4+8+4 = 29.



class Solution{
public:

    bool issafe(int i,int j,int n,int m)
    {
        if(i<0 || j<0 || i>= n || j>=m){
            return false;
        }
        return true;
    }

    int query2(int a,int b,vector<vector<int>> &mat){
        int n = mat.size();
        int m = mat[0].size();
        
        int sum = -mat[a][b];
        for(int i = a-2 ; i<=a+2;i++){
            for(int j = b-2; j <= b+2 ;j++){
                if(issafe(i,j,n,m)){
                    sum += mat[i][j];
                }
            }
        }
        
        sum -= query1(a,b,mat);
        
        return sum;
    }

    int query1(int a,int b,vector<vector<int>> &mat){
        int n = mat.size();
        int m = mat[0].size();
        
        int sum = -mat[a][b];
        for(int i = a-1 ; i<=a+1;i++){
            for(int j = b-1; j <= b+1 ;j++){
                if(issafe(i,j,n,m)){
                    sum += mat[i][j];
                }
            }
        }
        
        return sum;
    }
    
    

    vector<int> matrixSum(int n, int m, vector<vector<int>> mat, int q, vector<int> queries[])
    {
        vector<int> res;
        
        for(int i = 0; i <q ; i++){
            if(queries[i][0]==1){
                res.push_back(query1(queries[i][1],queries[i][2],mat));
            }else{
                res.push_back(query2(queries[i][1],queries[i][2],mat));
            }
        }
        
        return res;
    }
};


Expected Time Complexity: O(q)
Expected Auxiliary Space: O(q)

Constraints:
1 ≤ n, m ≤ 103
0 ≤ mat[i][j] ≤ 107
1 ≤ q ≤ 105
1 ≤ q[i][0] ≤ 2
0 ≤ q[i][1] < n
0 ≤ q[i][2] < m
