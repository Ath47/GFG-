Given an integer X and an undirected acyclic graph with V nodes, labeled from 0 to V-1, and E edges, find the level of node labeled as X.
Level is the minimum number of edges you must travel from the node 0 to some target.
If there doesn't exists such a node that is labeled as X, return -1.

Input:
Image src
X = 4
Output:
2

class Solution
{
	public:
    
	int nodeLevel(int V, vector<int> adj[], int x) {
	    vector<bool> visited(V, false);
	    vector<int> level(V, -1);
	    queue<int> qu;
	    
	    qu.push(0);
	    visited[0] = true;
	    level[0] = 0;
	    
	    while(!qu.empty()) {
	        int node = qu.front();
	        qu.pop();
	        for(int neighbour: adj[node]) {
	            if(!visited[neighbour]) {
	                visited[neighbour] = true;
	                level[neighbour] = level[node] + 1;
	                qu.push(neighbour);
	            }
	        }
	    }
	    return level[x];
	}
};


Expected Time Complexity: O(V)
Expected Auxiliary Space: O(V)

Constraints:
2 ≤ V ≤ 104
1 ≤ E ≤ 104
0 ≤ adji, j < V
1 ≤ X < V
Graph doesn't contain multiple edges and self loops.
