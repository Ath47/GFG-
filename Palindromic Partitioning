Given a string str, a partitioning of the string is a palindrome partitioning if every sub-string of the partition is a palindrome. Determine the fewest cuts needed for palindrome partitioning of the given string.

Example 1:

Input: str = "ababbbabbababa"
Output: 3
Explaination: After 3 partitioning substrings 
are "a", "babbbab", "b", "ababa".

class Solution{
public:
    
    bool isPalindrome(string& str, int i, int j) {
        while(i <= j) {
            if(str[i++] != str[j--]) return false;
        }
        return true;
    }

    int palindromicPartition(string str) {
        int n = str.size();
        vector<int> dp(n + 1, 0);
        for(int i = n - 1; i >= 0; i--) {
            int temp = INT_MAX;
            for(int j = i; j < n; j++) {
                if(isPalindrome(str, i, j)) {
                    int res = 1 + dp[j + 1];
                    temp = min(temp, res);
                }
                dp[i] = temp;
            }
        }
        return dp[0] - 1;
    }
};

Expected Time Complexity: O(n*n) [n is the length of the string str]
Expected Auxiliary Space: O(n*n)


Constraints:
1 ≤ length of str ≤ 500
