Given a binary tree, find out whether it contains a duplicate sub-tree of size two or more, or not.
Note: Two same leaf nodes are not considered as subtree as size of a leaf node is one. 

Input : 
               1
             /   \ 
           2       3
         /   \       \    
        4     5       2     
                     /  \    
                    4    5
Output : 1
Explanation : 
    2     
  /   \    
 4     5
is the duplicate sub-tree.


/*The structure of the Binary Tree Node  is
struct Node
{
  char data;
  struct Node* left;
  struct Node* right;
};*/

class Solution {
  public:
    /*This function returns true if the tree contains 
    a duplicate subtree of size 2 or more else returns false*/
    unordered_map<string, int> mp;
    string helper(Node* root) {
        if(!root) return "X";
        string s = "";
        if(!root -> left && !root -> right){
            s = to_string(root -> data);
            return s;
        }
        s += to_string(root -> data);
        s += "Y";
        s += helper(root -> left);
        s += helper(root -> right);
        mp[s] ++;
        return s;
    }
    
    int dupSub(Node *root) {
        // code here
        helper(root);
        for(auto itr: mp) {
            if(itr.second >= 2) return 1;
        }
        return 0;
         
    }
};

Expected Time Complexity: O(N)
Expected Space Complexity: O(N)
