You are given a BST(Binary Search Tree) with n number of nodes and value x. your task is to find the greatest value node of the BST which is smaller than or equal to x.
Note: when x is smaller than the smallest node of BST then returns -1.
Input:
n = 4                     6
                           \
                            8
                          /   \
                        7       9
x = 11
Output:
9

class Solution{

public:
    int floor(Node* root, int x) {
        int res = -1;
        if(!root) return -1;
        if(root -> data == x) return x;
        
        if(root -> data < x) {
            res = max(res, root -> data);
            return res = max(res, floor(root -> right, x));
        } else {
            return res = max(res, floor(root -> left, x));
        }
    }
};


1 <= Noda data <= 109
1 <= n <= 105

Expected Time Complexity: O(n)
Expected Space Complexity: O(1)
