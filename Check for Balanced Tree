Given a binary tree, find if it is height balanced or not. 
A tree is height balanced if difference between heights of left and right subtrees is not more than one for all nodes of tree. 

A height balanced tree
        1
     /     \
   10      39
  /
5

An unbalanced tree
        1
     /    
   10   
  /
5

class Solution{
    public:
    //Function to check whether a binary tree is balanced or not.
    bool isBalanced(Node *root)
    {
        if(!root) return 1;
        
        int left = getHeight(root -> left);
        int right = getHeight(root -> right);
        
        if(abs(left - right) <= 1 && isBalanced(root -> left) && isBalanced(root -> right)) {
            return true;
        }
        return false;
    }
    
    int getHeight(Node* root) {
        if(!root) return 0;
        
        int left = getHeight(root -> left);
        int right = getHeight(root -> right);
        return (1 + max(left, right));
    }
};


Constraints:
1 <= Number of nodes <= 105
1 <= Data of a node <= 109

Expected time complexity: O(N)
Expected auxiliary space: O(h) , where h = height of tree
